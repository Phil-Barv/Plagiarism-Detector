from hashing_strategies.rolling_hashing import HashTableV1
from tests.test_data import X, Y, K, test1_x, test1_y, test1_k, test2_k, test2_x, test2_y, test3_y

print("\n\nTesting Rolling Hashing Strategy\n")

print("\nCommencing test 0...")
ht = HashTableV1(X,Y,K)
ht.rh_get_match(True) #toogle True/False to show/hide the matches --> useful for testing runtime
print("\nTest 0 completed \n")

assert(ht.print_all_matches() == [(2, 0), (10, 0)])

#Test 1
print("\nCommencing test 1...")
ht = HashTableV1(test1_x,test1_y,test1_k)
ht.rh_get_match(True)
ht.summary()
print("\nTest 1 completed \n")

assert(ht.print_all_matches() == [(25, 5), (26, 6), (27, 7), (28, 8), (29, 9), (30, 10), (31, 11), (75, 28)])
# 0.00% collusions indicates that the hash function is not susceptible to short similar inputs.

#Test 2
print("Commencing test 2...")
HT2 = HashTableV1(test2_x,test2_y,test2_k)
HT2.rh_get_match(True)
HT2.summary()
print("\nTest 2 completed \n")

assert(HT2.print_all_matches() == [(723, 0)])


### Test 3: y longer than x
print("Commencing test 3...")
HT3 = HashTableV1(test2_x,test3_y,13)
HT3.rh_get_match(True)
HT3.summary()
print("\nTest 3 completed \n")

assert(HT3.print_all_matches() == [(384, 29),(385, 30),(356, 31),(386, 31),(778, 31),(357, 32),(387, 32),
 (779, 32),(358, 33),(388, 33),(780, 33), (359, 34),(389, 34),(781, 34),(360, 35),(390, 35),(782, 35),(361, 36),
 (391, 36),(783, 36),(362, 37),(392, 37),(784, 37),(240, 40),(241, 41),(242, 42),(560, 45),(48, 85),(96, 85),(49, 86),
 (97, 86),(50, 87),(98, 87),(51, 88),(99, 88),(52, 89),(100, 89),(53, 90),(101, 90),(54, 91),(102, 91),(55, 92),
 (103, 92),(104, 93),(105, 94),(106, 95),(107, 96),(108, 97),(109, 98),(165, 133),(166, 134),(167, 135),(168, 136),
 (169, 137),(170, 138),(171, 139),(172, 140),(232, 170),(233, 171),(234, 172),(235, 173),(236, 174),(237, 175),
 (238, 176),(239, 177),(240, 178),(241, 179),(242, 180),(243, 181),(244, 182),(245, 183),(246, 184),(247, 185),
 (248, 186),(249, 187),(315, 225),(316, 226),(317, 227),(318, 228),(319, 229),(320, 230),(321, 231),(322, 232),
 (323, 233),(324, 234),(356, 247),(386, 247),(778, 247),(357, 248),(387, 248),(779, 248),(358, 249),(388, 249),
 (780, 249),(359, 250),(389, 250),(781, 250),(360, 251),(390, 251),(782, 251),(361, 252),(391, 252),(783, 252),
 (362, 253),(392, 253),(784, 253),(393, 254),(356, 346),(386, 346),(778, 346),(357, 347),(387, 347),(779, 347),
 (358, 348),(388, 348),(780, 348),(359, 349),(389, 349),(781, 349),(360, 350),(390, 350),(782, 350),(361, 351),
 (391, 351),(783, 351),(362, 352),(392, 352),(784, 352),(363, 353),(785, 353),(364, 354),(786, 354),(365, 355),
 (787, 355),(366, 356),(788, 356),(367, 357),(789, 357),(368, 358),(790, 358),(369, 359),(791, 359),(370, 360),
 (792, 360),(371, 361),(793, 361),(372, 362),(315, 569),(197, 908),(335, 922),(356, 951),(386, 951),(778, 951),
 (357, 952),(387, 952),(779, 952),(358, 953),(388, 953),(780, 953),(359, 954),(389, 954),(781, 954),(360, 955),
 (390, 955),(782, 955),(361, 956),(391, 956),(783, 956),(362, 957),(392, 957),(784, 957),(363, 958),(785, 958),
 (364, 959),(786, 959),(365, 960),(787, 960),(366, 961),(788, 961),(367, 962),(789, 962),(368, 963),(790, 963),
 (369, 964),(791, 964),(370, 965),(792, 965),(371, 966),(793, 966)])

# From this test, we have broken out plagiarism detector by finding collusions.